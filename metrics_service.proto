syntax = "proto3";

package metrics_service;

import "google/protobuf/timestamp.proto";

enum ValueType {
    ValueType_UNKNOWN = 0;
    ValueType_DOUBLE = 1;
    ValueType_STRING = 2;
}

message Metric {
    string identifier = 1;

    google.protobuf.Timestamp when = 2;

    oneof Value {
        double double_value = 4;
        string string_value = 5;
    }
}

message CompressedMetric {
    string identifier = 1;

    message TimeValue {
        google.protobuf.Timestamp when = 2;
    
        oneof Value {
            double double_value = 4;
            string string_value = 5;
        }
    }

    repeated TimeValue time_values = 2;
}

message RecordMetricsRequest {
    repeated Metric metrics = 1;
}

message RecordMetricsResponse {
}

message LoadMetricsRequest {
    // prefix to match on; metrics are stored as
    // 'sevice.metric_name', so at the very least, this should
    // match the service name.
    string prefix = 1;
    
    message TimeRange {
        // if non-zero, defines a start/end time
        google.protobuf.Timestamp start = 1;
        google.protobuf.Timestamp stop = 2;
    }

    TimeRange time_range = 2;

    // value type to search for; generally, we expect all metrics to be of the same
    // type, but the ensures clean responses
    ValueType value_type = 3;

    // the maximum number of time values to return per metric
    int64 max_time_values = 4;
}

message LoadMetricsResponse {
    repeated CompressedMetric metrics = 1;
}

message ListMetricsRequest {
    string prefix = 1;
}

message ListMetricsResponse {
    message ListMetric {
        string identifier = 1;
        google.protobuf.Timestamp last_timestamp = 2;
    }

    repeated ListMetric metrics_list = 1;
}

service MetricsService {
    rpc RecordMetrics(RecordMetricsRequest)
        returns (RecordMetricsResponse);
    
    rpc LoadMetrics(LoadMetricsRequest)
        returns (LoadMetricsResponse);
    
    rpc ListMetrics(ListMetricsRequest)
        returns (ListMetricsResponse);
}
